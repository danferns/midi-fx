import{S as $,i as g,s as b,f as y,m as N,t as v,g as S,h as x,A as C,e as D,B as I,a as M,b as w,C as E,D as O,d as j}from"./index.9537bdcf.js";import{c as z}from"./NodeUtil.de1e0169.js";import{N as A}from"./NodeUI.ffd646b1.js";import{isNoteOn as q,isNoteOff as B}from"./note-splitter.0991ca8f.js";const F=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];function G(n){return F[n%12]}function T(n){let e,s=(n[0].join(", ")||"")+"",t;return{c(){e=D("div"),t=I(s),M(e,"class","svelte-5ys7qc")},m(o,r){w(o,e,r),E(e,t)},p(o,r){r&1&&s!==(s=(o[0].join(", ")||"")+"")&&O(t,s)},d(o){o&&j(e)}}}function k(n){let e,s;return e=new A({props:{width:200,$$slots:{default:[T]},$$scope:{ctx:n}}}),{c(){y(e.$$.fragment)},m(t,o){N(e,t,o),s=!0},p(t,[o]){const r={};o&257&&(r.$$scope={dirty:o,ctx:t}),e.$set(r)},i(t){s||(v(e.$$.fragment,t),s=!0)},o(t){S(e.$$.fragment,t),s=!1},d(t){x(e,t)}}}const K=`Displays which chords are being played at its input.
    It recognizes chords based on patterns defined in its built-in dictionary.`,l={M:[0,4,7],"(9)":[0,2,4,7],6:[0,4,7,9],mM7:[0,3,7,11],M7:[0,4,7,11],m:[0,3,7],"m(9)":[0,2,3,7],m6:[0,3,7,9],"m7(9)":[0,2,3,7,10],m7:[0,3,7,10],m7b5:[0,3,6,10],7:[0,4,7,10],"7(b9)":[0,1,4,7,10],"7(9)":[0,2,4,7,10],"7(#9)":[0,3,4,7,10],"7(b13)":[0,4,7,8,10],"7(13)":[0,4,7,9,10],"7(#11)":[0,4,6,7,10],dim7:[0,3,6,9],dim:[0,3,6],"7aug":[0,4,8,10],aug:[0,4,8],"7sus4":[0,5,7,10],sus4:[0,5,7]};function P(n,e){if(n.size!==e.length)return!1;for(const s of n){let t=0;for(const o of e)if(n.has((s+o)%12))t++;else break;if(t===n.size)return s}}function U(n,e,s){let{id:t}=e;const o={MIDI:(i,a,c)=>{q(i,a,c)?(u.add(a),d()):B(i,a,c)&&(u.delete(a),d()),m("MIDI",i,a,c)}},r={MIDI:new Set},m=z(t,r),h=C();let f=[],u=new Set;function d(){const i=new Set;u.forEach(c=>i.add(c%12));const a=[];for(const[c,_]of Object.entries(l)){const p=P(i,_);typeof p=="number"&&a.push(`${G(p)}${c}`)}s(0,f=a),h("resize")}return n.$$set=i=>{"id"in i&&s(1,t=i.id)},[f,t,o,r]}class H extends ${constructor(e){super(),g(this,e,U,k,b,{id:1,inputs:2,outputs:3})}get inputs(){return this.$$.ctx[2]}get outputs(){return this.$$.ctx[3]}}var V=Object.freeze(Object.defineProperty({__proto__:null,default:H,doc:K,chordShapes:l},Symbol.toStringTag,{value:"Module"}));export{V as a,l as c,G as r};
