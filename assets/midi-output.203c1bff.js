import{S as O,i as y,s as N,f as _,m as h,t as b,g as w,h as v,A as S,o as k,L as C,M as E,c as L,j as V,l as j}from"./index.9537bdcf.js";import{N as q}from"./NodeUI.ffd646b1.js";import{D as z}from"./DropDown.0f3ed1b2.js";import{u as d}from"./webmidi.esm.min.73462bb3.js";function A(u){let t,s,e;function r(n){u[4](n)}let a={options:u[0]};return u[1]!==void 0&&(a.value=u[1]),t=new z({props:a}),L.push(()=>V(t,"value",r)),t.$on("change",u[2]),{c(){_(t.$$.fragment)},m(n,p){h(t,n,p),e=!0},p(n,p){const c={};p&1&&(c.options=n[0]),!s&&p&2&&(s=!0,c.value=n[1],j(()=>s=!1)),t.$set(c)},i(n){e||(b(t.$$.fragment,n),e=!0)},o(n){w(t.$$.fragment,n),e=!1},d(n){v(t,n)}}}function B(u){let t,s;return t=new q({props:{$$slots:{default:[A]},$$scope:{ctx:u}}}),{c(){_(t.$$.fragment)},m(e,r){h(t,e,r),s=!0},p(e,[r]){const a={};r&2051&&(a.$$scope={dirty:r,ctx:e}),t.$set(a)},i(e){s||(b(t.$$.fragment,e),s=!0)},o(e){w(t.$$.fragment,e),s=!1},d(e){v(t,e)}}}const J=`
    Sends MIDI messages to an external MIDI device.
    `;function T(u){u.blur()}function U(u,t,s){const e={MIDI:(o,i,l)=>{const f=[o||a];typeof i=="number"&&f.push(i),typeof i=="number"&&typeof l=="number"&&f.push(l);try{r==null||r.send(f)}catch(M){console.error("Error sending to Web MIDI Output."),console.error(M)}a=o||a}};let r;var a;const n=S();let p=[],c;k(async()=>{await d.enable(),d.addListener("portschanged",m),m()});async function m(){const o=[],i=d.outputs;for(const f of i)o.push(f.name);s(0,p=o);const l=await g.getValue();p.includes(l)&&$(l),await C(),n("resize",{})}const g=new E.local("output");function I(o){const i=o.target;T(i),$(i.value),g.setValue(i.value)}function $(o){s(1,c=o),r=d.getOutputByName(o)}function D(o){c=o,s(1,c)}return[p,c,I,e,D]}class K extends O{constructor(t){super(),y(this,t,U,B,N,{inputs:3})}get inputs(){return this.$$.ctx[3]}}export{K as default,J as doc};
