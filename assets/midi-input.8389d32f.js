import{S as L,i as S,s as k,f as I,m as h,t as v,g as D,h as b,A as B,o as C,L as E,M as V,c as j,j as q,l as z}from"./index.9537bdcf.js";import{c as A}from"./NodeUtil.de1e0169.js";import{N as R}from"./NodeUI.ffd646b1.js";import{D as T}from"./DropDown.0f3ed1b2.js";import{u as f}from"./webmidi.esm.min.73462bb3.js";function U(o){let t,a,e;function i(n){o[5](n)}let p={options:o[0]};return o[1]!==void 0&&(p.value=o[1]),t=new T({props:p}),j.push(()=>q(t,"value",i)),t.$on("change",o[2]),{c(){I(t.$$.fragment)},m(n,c){h(t,n,c),e=!0},p(n,c){const r={};c&1&&(r.options=n[0]),!a&&c&2&&(a=!0,r.value=n[1],z(()=>a=!1)),t.$set(r)},i(n){e||(v(t.$$.fragment,n),e=!0)},o(n){D(t.$$.fragment,n),e=!1},d(n){b(t,n)}}}function F(o){let t,a;return t=new R({props:{$$slots:{default:[U]},$$scope:{ctx:o}}}),{c(){I(t.$$.fragment)},m(e,i){h(t,e,i),a=!0},p(e,[i]){const p={};i&8195&&(p.$$scope={dirty:i,ctx:e}),t.$set(p)},i(e){a||(v(t.$$.fragment,e),a=!0)},o(e){D(t.$$.fragment,e),a=!1},d(e){b(t,e)}}}const W=`
    Receives MIDI messages from an external MIDI device.
    `;function G(o){o.blur()}function H(o,t,a){let{id:e}=t;const i={MIDI:new Set},p=A(e,i),n=B();let c=[],r,d;C(async()=>{await f.enable(),f.addListener("portschanged",g),g()});async function g(){const s=[],u=f.inputs;for(const m of u)s.push(m.name);a(0,c=s);const l=await _.getValue();c.includes(l)&&$(l),await E(),n("resize",{})}const _=new V.local("input");function M(s){const u=s.target;G(u),$(u.value),_.setValue(u.value)}function $(s){a(1,d=s),r==null||r.removeListener("midimessage",w),r=f.getInputByName(s),r.addListener("midimessage",w)}function w(s){const u=s.message,l=u.data[0],m=u.rawDataBytes[0],y=u.rawDataBytes[1];p("MIDI",l,m,y)}function N(s){d=s,a(1,d)}return o.$$set=s=>{"id"in s&&a(3,e=s.id)},[c,d,M,e,i,N]}class X extends L{constructor(t){super(),S(this,t,H,F,k,{id:3,outputs:4})}get outputs(){return this.$$.ctx[4]}}export{X as default,W as doc};
