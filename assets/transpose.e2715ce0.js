import{S as I,i as h,s as b,f as l,m as _,t as d,g,h as $,c as N,j as v,l as D}from"./index.9537bdcf.js";import{c as M}from"./NodeUtil.de1e0169.js";import{N as w}from"./NodeUI.ffd646b1.js";import{N as S}from"./NumericInput.39abe510.js";import{messageTypes as T}from"./filter.6a28075a.js";function k(r){let t,s,e;function i(n){r[4](n)}let a={};return r[0].transpose!==void 0&&(a.value=r[0].transpose),t=new S({props:a}),N.push(()=>v(t,"value",i)),{c(){l(t.$$.fragment)},m(n,u){_(t,n,u),e=!0},p(n,u){const c={};!s&&u&1&&(s=!0,c.value=n[0].transpose,D(()=>s=!1)),t.$set(c)},i(n){e||(d(t.$$.fragment,n),e=!0)},o(n){g(t.$$.fragment,n),e=!1},d(n){$(t,n)}}}function q(r){let t,s;return t=new w({props:{width:"150",$$slots:{default:[k]},$$scope:{ctx:r}}}),{c(){l(t.$$.fragment)},m(e,i){_(t,e,i),s=!0},p(e,[i]){const a={};i&65&&(a.$$scope={dirty:i,ctx:e}),t.$set(a)},i(e){s||(d(t.$$.fragment,e),s=!0)},o(e){g(t.$$.fragment,e),s=!1},d(e){$(t,e)}}}const U=`
    Transposes all note on / off MIDI messages by a specified number of semitones.
    `;function x(r,t,s){let{id:e}=t;const i={MIDI:(o,p,m)=>{if(T["Note On / Off"](o)){const f=p+n.transpose;f>0&&f<127&&u("MIDI",o,f,m)}else u("MIDI",o,p,m)}},a={MIDI:new Set};let{state:n={transpose:0}}=t;const u=M(e,a);function c(o){r.$$.not_equal(n.transpose,o)&&(n.transpose=o,s(0,n))}return r.$$set=o=>{"id"in o&&s(1,e=o.id),"state"in o&&s(0,n=o.state)},[n,e,i,a,c]}class z extends I{constructor(t){super(),h(this,t,x,q,b,{id:1,inputs:2,outputs:3,state:0})}get inputs(){return this.$$.ctx[2]}get outputs(){return this.$$.ctx[3]}}export{z as default,U as doc};
